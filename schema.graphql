""""Article"""
type Article implements Node {
  """The ID of an object"""
  id: ID!

  """Article headline"""
  headline: String

  """Article subhed"""
  subhed: String

  """Article excerpt for the promo"""
  excerpt: String

  """Article body"""
  body: String

  """URL of article promo image"""
  image_url: String

  """Article publication timestamp"""
  publication_time: String

  """Article authors"""
  authors(after: String, first: Int, before: String, last: Int): AuthorConnection

  """Article tags"""
  tags(after: String, first: Int, before: String, last: Int): TagConnection
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge]
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge"""
  node: Article

  """A cursor for use in pagination"""
  cursor: String!
}

"""Author of an article"""
type Author implements Node {
  """The ID of an object"""
  id: ID!

  """Author's name"""
  name: String

  """
  The string (usually surname) by which the author's name should be sorted
  """
  sort_name: String

  """Author's email address"""
  email: String
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge"""
  node: Author

  """A cursor for use in pagination"""
  cursor: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """All the articles"""
  articles(after: String, first: Int, before: String, last: Int): ArticleConnection

  """Single article"""
  article(id: ID): Article

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""Tag"""
type Tag implements Node {
  """The ID of an object"""
  id: ID!

  """Tag name"""
  name: String

  """Tag description"""
  description: String
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge"""
  node: Tag

  """A cursor for use in pagination"""
  cursor: String!
}

"""A moment in time"""
scalar Timestamp
